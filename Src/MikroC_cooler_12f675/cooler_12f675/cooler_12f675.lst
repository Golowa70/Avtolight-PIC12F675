;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 10.10.2014 1:37:10
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2A4A      	GOTO       586
_interrupt:
0x0004	0x00DF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00B5      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00B4      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0850      	MOVF       R0, 0
0x000C	0x00A3      	MOVWF      35
0x000D	0x0851      	MOVF       R1, 0
0x000E	0x00A2      	MOVWF      34
0x000F	0x0852      	MOVF       R2, 0
0x0010	0x00A1      	MOVWF      33
0x0011	0x085D      	MOVF       R13, 0
0x0012	0x00A0      	MOVWF      32
;MyProject.c,129 :: 		void interrupt (void)  {                       //функция обработки всех прерываний
;MyProject.c,131 :: 		if (INTCON.T0IF) {                          //если прерывание от TMR0..
0x0013	0x1D0B      	BTFSS      INTCON, 2
0x0014	0x2816      	GOTO       L_interrupt29
;MyProject.c,132 :: 		INTCON.T0IF = 0;                        //...сбрасываем флаг
0x0015	0x110B      	BCF        INTCON, 2
;MyProject.c,134 :: 		}
L_interrupt29:
0x0016	0x1283      	BCF        STATUS, 5
;MyProject.c,135 :: 		if( PIR1.TMR1IF ){                         //прерывания два раза в секунду
0x0017	0x1C0C      	BTFSS      PIR1, 0
0x0018	0x28B0      	GOTO       L_interrupt30
;MyProject.c,136 :: 		PIR1.TMR1IF=0;
0x0019	0x100C      	BCF        PIR1, 0
;MyProject.c,141 :: 		switch (a){
0x001A	0x288B      	GOTO       L_interrupt31
;MyProject.c,143 :: 		case 0 :    t= Ow_Reset(&GPIO, 5);
L_interrupt33:
0x001B	0x3005      	MOVLW      GPIO
0x001C	0x00B8      	MOVWF      FARG_Ow_Reset_port
0x001D	0x3005      	MOVLW      5
0x001E	0x00B9      	MOVWF      FARG_Ow_Reset_pin
0x001F	0x210B      	CALL       _Ow_Reset
0x0020	0x0850      	MOVF       R0, 0
0x0021	0x00B3      	MOVWF      _t
;MyProject.c,144 :: 		Ow_Reset(&GPIO, 5);
0x0022	0x3005      	MOVLW      GPIO
0x0023	0x00B8      	MOVWF      FARG_Ow_Reset_port
0x0024	0x3005      	MOVLW      5
0x0025	0x00B9      	MOVWF      FARG_Ow_Reset_pin
0x0026	0x210B      	CALL       _Ow_Reset
;MyProject.c,145 :: 		Ow_write(&GPIO, 5,0xCC);
0x0027	0x3005      	MOVLW      GPIO
0x0028	0x00B8      	MOVWF      FARG_Ow_Write_port
0x0029	0x3005      	MOVLW      5
0x002A	0x00B9      	MOVWF      FARG_Ow_Write_pin
0x002B	0x30CC      	MOVLW      204
0x002C	0x00BA      	MOVWF      FARG_Ow_Write_data_
0x002D	0x21B5      	CALL       _Ow_Write
;MyProject.c,146 :: 		Ow_write(&GPIO, 5,0x44);
0x002E	0x3005      	MOVLW      GPIO
0x002F	0x00B8      	MOVWF      FARG_Ow_Write_port
0x0030	0x3005      	MOVLW      5
0x0031	0x00B9      	MOVWF      FARG_Ow_Write_pin
0x0032	0x3044      	MOVLW      68
0x0033	0x00BA      	MOVWF      FARG_Ow_Write_data_
0x0034	0x21B5      	CALL       _Ow_Write
;MyProject.c,147 :: 		a=1;
0x0035	0x3001      	MOVLW      1
0x0036	0x00A5      	MOVWF      _a
;MyProject.c,149 :: 		break;
0x0037	0x28B0      	GOTO       L_interrupt32
;MyProject.c,150 :: 		case 1 :    Ow_Reset(&GPIO, 5);
L_interrupt34:
0x0038	0x3005      	MOVLW      GPIO
0x0039	0x00B8      	MOVWF      FARG_Ow_Reset_port
0x003A	0x3005      	MOVLW      5
0x003B	0x00B9      	MOVWF      FARG_Ow_Reset_pin
0x003C	0x210B      	CALL       _Ow_Reset
;MyProject.c,151 :: 		Ow_write(&GPIO, 5,0xCC);
0x003D	0x3005      	MOVLW      GPIO
0x003E	0x00B8      	MOVWF      FARG_Ow_Write_port
0x003F	0x3005      	MOVLW      5
0x0040	0x00B9      	MOVWF      FARG_Ow_Write_pin
0x0041	0x30CC      	MOVLW      204
0x0042	0x00BA      	MOVWF      FARG_Ow_Write_data_
0x0043	0x21B5      	CALL       _Ow_Write
;MyProject.c,152 :: 		Ow_write(&GPIO, 5,0xBE);
0x0044	0x3005      	MOVLW      GPIO
0x0045	0x00B8      	MOVWF      FARG_Ow_Write_port
0x0046	0x3005      	MOVLW      5
0x0047	0x00B9      	MOVWF      FARG_Ow_Write_pin
0x0048	0x30BE      	MOVLW      190
0x0049	0x00BA      	MOVWF      FARG_Ow_Write_data_
0x004A	0x21B5      	CALL       _Ow_Write
;MyProject.c,153 :: 		a=2;
0x004B	0x3002      	MOVLW      2
0x004C	0x00A5      	MOVWF      _a
;MyProject.c,154 :: 		break;
0x004D	0x28B0      	GOTO       L_interrupt32
;MyProject.c,155 :: 		case 2 :   a=3;
L_interrupt35:
0x004E	0x3003      	MOVLW      3
0x004F	0x00A5      	MOVWF      _a
;MyProject.c,156 :: 		BUZZER=0;                       //выключаем зуммер
0x0050	0x1205      	BCF        GPIO, 4
;MyProject.c,157 :: 		break;
0x0051	0x28B0      	GOTO       L_interrupt32
;MyProject.c,158 :: 		case 3 :   a=4;
L_interrupt36:
0x0052	0x3004      	MOVLW      4
0x0053	0x00A5      	MOVWF      _a
;MyProject.c,159 :: 		break;
0x0054	0x28B0      	GOTO       L_interrupt32
;MyProject.c,160 :: 		case 4 :   a=5;
L_interrupt37:
0x0055	0x3005      	MOVLW      5
0x0056	0x00A5      	MOVWF      _a
;MyProject.c,161 :: 		break;
0x0057	0x28B0      	GOTO       L_interrupt32
;MyProject.c,162 :: 		case 5 :   a=6;
L_interrupt38:
0x0058	0x3006      	MOVLW      6
0x0059	0x00A5      	MOVWF      _a
;MyProject.c,163 :: 		break;
0x005A	0x28B0      	GOTO       L_interrupt32
;MyProject.c,164 :: 		case 6 :   a=7;
L_interrupt39:
0x005B	0x3007      	MOVLW      7
0x005C	0x00A5      	MOVWF      _a
;MyProject.c,165 :: 		break;
0x005D	0x28B0      	GOTO       L_interrupt32
;MyProject.c,167 :: 		case 7 :    n=Ow_Read(&GPIO,5);                               //читаем температуру
L_interrupt40:
0x005E	0x3005      	MOVLW      GPIO
0x005F	0x00B8      	MOVWF      FARG_Ow_Read_port
0x0060	0x3005      	MOVLW      5
0x0061	0x00B9      	MOVWF      FARG_Ow_Read_pin
0x0062	0x21EA      	CALL       _Ow_Read
0x0063	0x0850      	MOVF       R0, 0
0x0064	0x00B2      	MOVWF      _n
;MyProject.c,168 :: 		temperature=Ow_Read(&GPIO,5);
0x0065	0x3005      	MOVLW      GPIO
0x0066	0x00B8      	MOVWF      FARG_Ow_Read_port
0x0067	0x3005      	MOVLW      5
0x0068	0x00B9      	MOVWF      FARG_Ow_Read_pin
0x0069	0x21EA      	CALL       _Ow_Read
0x006A	0x0850      	MOVF       R0, 0
0x006B	0x00A6      	MOVWF      _temperature
;MyProject.c,169 :: 		n >>=4;
0x006C	0x0832      	MOVF       _n, 0
0x006D	0x00D2      	MOVWF      R2
0x006E	0x0CD2      	RRF        R2, 1
0x006F	0x13D2      	BCF        R2, 7
0x0070	0x0CD2      	RRF        R2, 1
0x0071	0x13D2      	BCF        R2, 7
0x0072	0x0CD2      	RRF        R2, 1
0x0073	0x13D2      	BCF        R2, 7
0x0074	0x0CD2      	RRF        R2, 1
0x0075	0x13D2      	BCF        R2, 7
0x0076	0x0852      	MOVF       R2, 0
0x0077	0x00B2      	MOVWF      _n
;MyProject.c,170 :: 		temperature <<= 4;
0x0078	0x0850      	MOVF       R0, 0
0x0079	0x00A6      	MOVWF      _temperature
0x007A	0x0DA6      	RLF        _temperature, 1
0x007B	0x1026      	BCF        _temperature, 0
0x007C	0x0DA6      	RLF        _temperature, 1
0x007D	0x1026      	BCF        _temperature, 0
0x007E	0x0DA6      	RLF        _temperature, 1
0x007F	0x1026      	BCF        _temperature, 0
0x0080	0x0DA6      	RLF        _temperature, 1
0x0081	0x1026      	BCF        _temperature, 0
;MyProject.c,171 :: 		temperature += n;
0x0082	0x0852      	MOVF       R2, 0
0x0083	0x07A6      	ADDWF      _temperature, 1
;MyProject.c,172 :: 		a=8;
0x0084	0x3008      	MOVLW      8
0x0085	0x00A5      	MOVWF      _a
;MyProject.c,174 :: 		break;
0x0086	0x28B0      	GOTO       L_interrupt32
;MyProject.c,176 :: 		case 8:     fn_Auto_Cooler();
L_interrupt41:
0x0087	0x2133      	CALL       _fn_Auto_Cooler
;MyProject.c,178 :: 		a=0;
0x0088	0x01A5      	CLRF       _a
;MyProject.c,179 :: 		break;
0x0089	0x28B0      	GOTO       L_interrupt32
;MyProject.c,181 :: 		default:     break;
L_interrupt42:
0x008A	0x28B0      	GOTO       L_interrupt32
;MyProject.c,183 :: 		}                                //end case
L_interrupt31:
0x008B	0x0825      	MOVF       _a, 0
0x008C	0x3A00      	XORLW      0
0x008D	0x1903      	BTFSC      STATUS, 2
0x008E	0x281B      	GOTO       L_interrupt33
0x008F	0x0825      	MOVF       _a, 0
0x0090	0x3A01      	XORLW      1
0x0091	0x1903      	BTFSC      STATUS, 2
0x0092	0x2838      	GOTO       L_interrupt34
0x0093	0x0825      	MOVF       _a, 0
0x0094	0x3A02      	XORLW      2
0x0095	0x1903      	BTFSC      STATUS, 2
0x0096	0x284E      	GOTO       L_interrupt35
0x0097	0x0825      	MOVF       _a, 0
0x0098	0x3A03      	XORLW      3
0x0099	0x1903      	BTFSC      STATUS, 2
0x009A	0x2852      	GOTO       L_interrupt36
0x009B	0x0825      	MOVF       _a, 0
0x009C	0x3A04      	XORLW      4
0x009D	0x1903      	BTFSC      STATUS, 2
0x009E	0x2855      	GOTO       L_interrupt37
0x009F	0x0825      	MOVF       _a, 0
0x00A0	0x3A05      	XORLW      5
0x00A1	0x1903      	BTFSC      STATUS, 2
0x00A2	0x2858      	GOTO       L_interrupt38
0x00A3	0x0825      	MOVF       _a, 0
0x00A4	0x3A06      	XORLW      6
0x00A5	0x1903      	BTFSC      STATUS, 2
0x00A6	0x285B      	GOTO       L_interrupt39
0x00A7	0x0825      	MOVF       _a, 0
0x00A8	0x3A07      	XORLW      7
0x00A9	0x1903      	BTFSC      STATUS, 2
0x00AA	0x285E      	GOTO       L_interrupt40
0x00AB	0x0825      	MOVF       _a, 0
0x00AC	0x3A08      	XORLW      8
0x00AD	0x1903      	BTFSC      STATUS, 2
0x00AE	0x2887      	GOTO       L_interrupt41
0x00AF	0x288A      	GOTO       L_interrupt42
L_interrupt32:
;MyProject.c,186 :: 		}                                         //end TMR1
L_interrupt30:
;MyProject.c,187 :: 		}                                            //end interrupts
L_end_interrupt:
L__interrupt56:
0x00B0	0x0823      	MOVF       35, 0
0x00B1	0x00D0      	MOVWF      R0
0x00B2	0x0822      	MOVF       34, 0
0x00B3	0x00D1      	MOVWF      R1
0x00B4	0x0821      	MOVF       33, 0
0x00B5	0x00D2      	MOVWF      R2
0x00B6	0x0820      	MOVF       32, 0
0x00B7	0x00DD      	MOVWF      R13
0x00B8	0x0834      	MOVF       ___savePCLATH, 0
0x00B9	0x008A      	MOVWF      PCLATH
0x00BA	0x0E35      	SWAPF      ___saveSTATUS, 0
0x00BB	0x0083      	MOVWF      STATUS
0x00BC	0x0EDF      	SWAPF      R15, 1
0x00BD	0x0E5F      	SWAPF      R15, 0
0x00BE	0x0009      	RETFIE
; end of _interrupt
_Delay_500us:
;__Lib_Delays.c,27 :: 		void Delay_500us() {
;__Lib_Delays.c,28 :: 		Delay_us(498);
0x00BF	0x30A5      	MOVLW      165
0x00C0	0x1283      	BCF        STATUS, 5
0x00C1	0x00DD      	MOVWF      R13
L_Delay_500us4:
0x00C2	0x0BDD      	DECFSZ     R13, 1
0x00C3	0x28C2      	GOTO       L_Delay_500us4
0x00C4	0x0000      	NOP
0x00C5	0x0000      	NOP
;__Lib_Delays.c,29 :: 		}
L_end_Delay_500us:
0x00C6	0x0008      	RETURN
; end of _Delay_500us
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x00C7	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x00C8	0x0008      	RETURN
; end of _Delay_1us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x00C9	0x3010      	MOVLW      16
0x00CA	0x1283      	BCF        STATUS, 5
0x00CB	0x00DD      	MOVWF      R13
L_Delay_50us2:
0x00CC	0x0BDD      	DECFSZ     R13, 1
0x00CD	0x28CC      	GOTO       L_Delay_50us2
0x00CE	0x0000      	NOP
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x00CF	0x0008      	RETURN
; end of _Delay_50us
_Delay_80us:
;__Lib_Delays.c,23 :: 		void Delay_80us() {
;__Lib_Delays.c,24 :: 		Delay_us(78);
0x00D0	0x3019      	MOVLW      25
0x00D1	0x1283      	BCF        STATUS, 5
0x00D2	0x00DD      	MOVWF      R13
L_Delay_80us3:
0x00D3	0x0BDD      	DECFSZ     R13, 1
0x00D4	0x28D3      	GOTO       L_Delay_80us3
0x00D5	0x0000      	NOP
0x00D6	0x0000      	NOP
;__Lib_Delays.c,25 :: 		}
L_end_Delay_80us:
0x00D7	0x0008      	RETURN
; end of _Delay_80us
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x00D8	0x1283      	BCF        STATUS, 5
0x00D9	0x082E      	MOVF       ___DoICPAddr+1, 0
0x00DA	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x00DB	0x082D      	MOVF       ___DoICPAddr, 0
0x00DC	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x00DD	0x0008      	RETURN
; end of _____DoICP
_EEPROM_Read:
;__Lib_EEPROM.c,4 :: 		
;__Lib_EEPROM.c,5 :: 		
0x00DE	0x1283      	BCF        STATUS, 5
0x00DF	0x0837      	MOVF       FARG_EEPROM_Read_Address, 0
0x00E0	0x1683      	BSF        STATUS, 5
0x00E1	0x009B      	MOVWF      EEADR
;__Lib_EEPROM.c,6 :: 		
0x00E2	0x139C      	BCF        EECON1, 7
;__Lib_EEPROM.c,12 :: 		
0x00E3	0x141C      	BSF        EECON1, 0
;__Lib_EEPROM.c,13 :: 		
0x00E4	0x081A      	MOVF       EEDATA, 0
0x00E5	0x00D0      	MOVWF      R0
;__Lib_EEPROM.c,14 :: 		
L_end_EEPROM_Read:
0x00E6	0x0008      	RETURN
; end of _EEPROM_Read
_fn_Init_Const:
;MyProject.c,26 :: 		void fn_Init_Const (void){
;MyProject.c,27 :: 		Const_Temp1 = EEPROM_Read (0x0);                //  30
0x00E7	0x1283      	BCF        STATUS, 5
0x00E8	0x01B7      	CLRF       FARG_EEPROM_Read_Address
0x00E9	0x20DE      	CALL       _EEPROM_Read
0x00EA	0x0850      	MOVF       R0, 0
0x00EB	0x00AC      	MOVWF      _Const_Temp1
;MyProject.c,28 :: 		Const_Temp2 = EEPROM_Read (0x1);                //  45
0x00EC	0x3001      	MOVLW      1
0x00ED	0x00B7      	MOVWF      FARG_EEPROM_Read_Address
0x00EE	0x20DE      	CALL       _EEPROM_Read
0x00EF	0x0850      	MOVF       R0, 0
0x00F0	0x00B0      	MOVWF      _Const_Temp2
;MyProject.c,29 :: 		Const_Temp3 = EEPROM_Read (0x2);                //  60
0x00F1	0x3002      	MOVLW      2
0x00F2	0x00B7      	MOVWF      FARG_EEPROM_Read_Address
0x00F3	0x20DE      	CALL       _EEPROM_Read
0x00F4	0x0850      	MOVF       R0, 0
0x00F5	0x00AF      	MOVWF      _Const_Temp3
;MyProject.c,30 :: 		Const_Temp4 = EEPROM_Read (0x3);                //поорог включения зуммера 75
0x00F6	0x3003      	MOVLW      3
0x00F7	0x00B7      	MOVWF      FARG_EEPROM_Read_Address
0x00F8	0x20DE      	CALL       _EEPROM_Read
0x00F9	0x0850      	MOVF       R0, 0
0x00FA	0x00AB      	MOVWF      _Const_Temp4
;MyProject.c,31 :: 		Const_Pwm1  = EEPROM_Read (0x4);                //   10
0x00FB	0x3004      	MOVLW      4
0x00FC	0x00B7      	MOVWF      FARG_EEPROM_Read_Address
0x00FD	0x20DE      	CALL       _EEPROM_Read
0x00FE	0x0850      	MOVF       R0, 0
0x00FF	0x00A9      	MOVWF      _Const_Pwm1
;MyProject.c,32 :: 		Const_Pwm2  = EEPROM_Read (0x5);                //   25
0x0100	0x3005      	MOVLW      5
0x0101	0x00B7      	MOVWF      FARG_EEPROM_Read_Address
0x0102	0x20DE      	CALL       _EEPROM_Read
0x0103	0x0850      	MOVF       R0, 0
0x0104	0x00A8      	MOVWF      _Const_Pwm2
;MyProject.c,33 :: 		Const_Pwm3  = EEPROM_Read (0x6);                //   48
0x0105	0x3006      	MOVLW      6
0x0106	0x00B7      	MOVWF      FARG_EEPROM_Read_Address
0x0107	0x20DE      	CALL       _EEPROM_Read
0x0108	0x0850      	MOVF       R0, 0
0x0109	0x00AA      	MOVWF      _Const_Pwm3
;MyProject.c,34 :: 		}
L_end_fn_Init_Const:
0x010A	0x0008      	RETURN
; end of _fn_Init_Const
_Ow_Reset:
;__Lib_OneWire.c,5 :: 		
;__Lib_OneWire.c,8 :: 		
0x010B	0x1283      	BCF        STATUS, 5
0x010C	0x0839      	MOVF       FARG_Ow_Reset_pin, 0
0x010D	0x00D1      	MOVWF      R1
0x010E	0x3001      	MOVLW      1
0x010F	0x00D0      	MOVWF      R0
0x0110	0x0851      	MOVF       R1, 0
L__Ow_Reset9:
0x0111	0x1903      	BTFSC      STATUS, 2
0x0112	0x2917      	GOTO       L__Ow_Reset10
0x0113	0x0DD0      	RLF        R0, 1
0x0114	0x1050      	BCF        R0, 0
0x0115	0x3EFF      	ADDLW      255
0x0116	0x2911      	GOTO       L__Ow_Reset9
L__Ow_Reset10:
0x0117	0x0850      	MOVF       R0, 0
0x0118	0x00BB      	MOVWF      Ow_Reset_bit_mask_1_L0
;__Lib_OneWire.c,9 :: 		
0x0119	0x09D0      	COMF       R0, 1
;__Lib_OneWire.c,11 :: 		
0x011A	0x0838      	MOVF       FARG_Ow_Reset_port, 0
0x011B	0x0084      	MOVWF      FSR
;__Lib_OneWire.c,12 :: 		
0x011C	0x0850      	MOVF       R0, 0
0x011D	0x0580      	ANDWF      INDF, 1
;__Lib_OneWire.c,13 :: 		
0x011E	0x1784      	BSF        FSR, 7
;__Lib_OneWire.c,14 :: 		
0x011F	0x0850      	MOVF       R0, 0
0x0120	0x0580      	ANDWF      INDF, 1
;__Lib_OneWire.c,15 :: 		
0x0121	0x20BF      	CALL       _Delay_500us
;__Lib_OneWire.c,16 :: 		
0x0122	0x083B      	MOVF       Ow_Reset_bit_mask_1_L0, 0
0x0123	0x0480      	IORWF      INDF, 1
;__Lib_OneWire.c,18 :: 		
0x0124	0x1384      	BCF        FSR, 7
;__Lib_OneWire.c,19 :: 		
0x0125	0x20D0      	CALL       _Delay_80us
;__Lib_OneWire.c,20 :: 		
0x0126	0x083B      	MOVF       Ow_Reset_bit_mask_1_L0, 0
0x0127	0x0500      	ANDWF      INDF, 0
0x0128	0x00BA      	MOVWF      Ow_Reset_res_L0
0x0129	0x083A      	MOVF       Ow_Reset_res_L0, 0
0x012A	0x3A00      	XORLW      0
0x012B	0x3001      	MOVLW      1
0x012C	0x1903      	BTFSC      STATUS, 2
0x012D	0x3000      	MOVLW      0
0x012E	0x00BA      	MOVWF      Ow_Reset_res_L0
;__Lib_OneWire.c,21 :: 		
0x012F	0x20BF      	CALL       _Delay_500us
;__Lib_OneWire.c,22 :: 		
0x0130	0x083A      	MOVF       Ow_Reset_res_L0, 0
0x0131	0x00D0      	MOVWF      R0
;__Lib_OneWire.c,23 :: 		
L_end_Ow_Reset:
0x0132	0x0008      	RETURN
; end of _Ow_Reset
_fn_Auto_Cooler:
;MyProject.c,40 :: 		void fn_Auto_Cooler(void){                                             //фукция авторегулировки оборотов
;MyProject.c,43 :: 		if(temperature >= Const_Temp1) {                                     //если температура больше первого уровня
0x0133	0x1283      	BCF        STATUS, 5
0x0134	0x082C      	MOVF       _Const_Temp1, 0
0x0135	0x0226      	SUBWF      _temperature, 0
0x0136	0x1C03      	BTFSS      STATUS, 0
0x0137	0x2995      	GOTO       L_fn_Auto_Cooler0
;MyProject.c,46 :: 		if((temperature >= Const_Temp1) && (temperature < Const_Temp2) )  {     //если в пределах между первым и вторым уровнями...
0x0138	0x082C      	MOVF       _Const_Temp1, 0
0x0139	0x0226      	SUBWF      _temperature, 0
0x013A	0x1C03      	BTFSS      STATUS, 0
0x013B	0x295B      	GOTO       L_fn_Auto_Cooler3
0x013C	0x0830      	MOVF       _Const_Temp2, 0
0x013D	0x0226      	SUBWF      _temperature, 0
0x013E	0x1803      	BTFSC      STATUS, 0
0x013F	0x295B      	GOTO       L_fn_Auto_Cooler3
L__fn_Auto_Cooler48:
;MyProject.c,47 :: 		if(set_Pwm == Const_Pwm2){                                          //если сейчас на втором уровне ШИМ...
0x0140	0x0824      	MOVF       _set_Pwm, 0
0x0141	0x0628      	XORWF      _Const_Pwm2, 0
0x0142	0x1D03      	BTFSS      STATUS, 2
0x0143	0x2958      	GOTO       L_fn_Auto_Cooler4
;MyProject.c,48 :: 		if(temperature < (Const_Temp2-2)) set_Pwm=Const_Pwm1;            //гистерезис
0x0144	0x3002      	MOVLW      2
0x0145	0x0230      	SUBWF      _Const_Temp2, 0
0x0146	0x00D1      	MOVWF      R1
0x0147	0x01D2      	CLRF       R1+1
0x0148	0x1C03      	BTFSS      STATUS, 0
0x0149	0x03D2      	DECF       R1+1, 1
0x014A	0x3080      	MOVLW      128
0x014B	0x00D0      	MOVWF      R0
0x014C	0x3080      	MOVLW      128
0x014D	0x0652      	XORWF      R1+1, 0
0x014E	0x0250      	SUBWF      R0, 0
0x014F	0x1D03      	BTFSS      STATUS, 2
0x0150	0x2953      	GOTO       L__fn_Auto_Cooler51
0x0151	0x0851      	MOVF       R1, 0
0x0152	0x0226      	SUBWF      _temperature, 0
L__fn_Auto_Cooler51:
0x0153	0x1803      	BTFSC      STATUS, 0
0x0154	0x2957      	GOTO       L_fn_Auto_Cooler5
0x0155	0x0829      	MOVF       _Const_Pwm1, 0
0x0156	0x00A4      	MOVWF      _set_Pwm
L_fn_Auto_Cooler5:
;MyProject.c,49 :: 		}
0x0157	0x295A      	GOTO       L_fn_Auto_Cooler6
L_fn_Auto_Cooler4:
;MyProject.c,51 :: 		set_Pwm=Const_Pwm1;                                              //иначе выставляем первый уровень ШИМ
0x0158	0x0829      	MOVF       _Const_Pwm1, 0
0x0159	0x00A4      	MOVWF      _set_Pwm
L_fn_Auto_Cooler6:
;MyProject.c,54 :: 		}
0x015A	0x2989      	GOTO       L_fn_Auto_Cooler7
L_fn_Auto_Cooler3:
;MyProject.c,56 :: 		if((temperature >= Const_Temp2) && (temperature < Const_Temp3) )  {    //если в пределах между вторым и третим уровнями...
0x015B	0x0830      	MOVF       _Const_Temp2, 0
0x015C	0x0226      	SUBWF      _temperature, 0
0x015D	0x1C03      	BTFSS      STATUS, 0
0x015E	0x297E      	GOTO       L_fn_Auto_Cooler10
0x015F	0x082F      	MOVF       _Const_Temp3, 0
0x0160	0x0226      	SUBWF      _temperature, 0
0x0161	0x1803      	BTFSC      STATUS, 0
0x0162	0x297E      	GOTO       L_fn_Auto_Cooler10
L__fn_Auto_Cooler47:
;MyProject.c,57 :: 		if(set_Pwm == Const_Pwm3){
0x0163	0x0824      	MOVF       _set_Pwm, 0
0x0164	0x062A      	XORWF      _Const_Pwm3, 0
0x0165	0x1D03      	BTFSS      STATUS, 2
0x0166	0x297B      	GOTO       L_fn_Auto_Cooler11
;MyProject.c,58 :: 		if(temperature < (Const_Temp3-2)) set_Pwm=Const_Pwm2;
0x0167	0x3002      	MOVLW      2
0x0168	0x022F      	SUBWF      _Const_Temp3, 0
0x0169	0x00D1      	MOVWF      R1
0x016A	0x01D2      	CLRF       R1+1
0x016B	0x1C03      	BTFSS      STATUS, 0
0x016C	0x03D2      	DECF       R1+1, 1
0x016D	0x3080      	MOVLW      128
0x016E	0x00D0      	MOVWF      R0
0x016F	0x3080      	MOVLW      128
0x0170	0x0652      	XORWF      R1+1, 0
0x0171	0x0250      	SUBWF      R0, 0
0x0172	0x1D03      	BTFSS      STATUS, 2
0x0173	0x2976      	GOTO       L__fn_Auto_Cooler52
0x0174	0x0851      	MOVF       R1, 0
0x0175	0x0226      	SUBWF      _temperature, 0
L__fn_Auto_Cooler52:
0x0176	0x1803      	BTFSC      STATUS, 0
0x0177	0x297A      	GOTO       L_fn_Auto_Cooler12
0x0178	0x0828      	MOVF       _Const_Pwm2, 0
0x0179	0x00A4      	MOVWF      _set_Pwm
L_fn_Auto_Cooler12:
;MyProject.c,59 :: 		}
0x017A	0x297D      	GOTO       L_fn_Auto_Cooler13
L_fn_Auto_Cooler11:
;MyProject.c,61 :: 		set_Pwm=Const_Pwm2;
0x017B	0x0828      	MOVF       _Const_Pwm2, 0
0x017C	0x00A4      	MOVWF      _set_Pwm
L_fn_Auto_Cooler13:
;MyProject.c,63 :: 		}
0x017D	0x2989      	GOTO       L_fn_Auto_Cooler14
L_fn_Auto_Cooler10:
;MyProject.c,65 :: 		if(temperature >= Const_Temp3) {
0x017E	0x082F      	MOVF       _Const_Temp3, 0
0x017F	0x0226      	SUBWF      _temperature, 0
0x0180	0x1C03      	BTFSS      STATUS, 0
0x0181	0x2989      	GOTO       L_fn_Auto_Cooler15
;MyProject.c,66 :: 		set_Pwm=Const_Pwm3;
0x0182	0x082A      	MOVF       _Const_Pwm3, 0
0x0183	0x00A4      	MOVWF      _set_Pwm
;MyProject.c,67 :: 		if(temperature > Const_Temp4)BUZZER=1;                         //если температура больше допустимой (Temp4) включаем зуммер.
0x0184	0x0826      	MOVF       _temperature, 0
0x0185	0x022B      	SUBWF      _Const_Temp4, 0
0x0186	0x1803      	BTFSC      STATUS, 0
0x0187	0x2989      	GOTO       L_fn_Auto_Cooler16
0x0188	0x1605      	BSF        GPIO, 4
L_fn_Auto_Cooler16:
;MyProject.c,69 :: 		}
L_fn_Auto_Cooler15:
;MyProject.c,70 :: 		}
L_fn_Auto_Cooler14:
;MyProject.c,71 :: 		}
L_fn_Auto_Cooler7:
;MyProject.c,74 :: 		if(flag_Status_Cooler == 0){                              //если кулер не запущен...
0x0189	0x0831      	MOVF       _flag_Status_Cooler, 0
0x018A	0x3A00      	XORLW      0
0x018B	0x1D03      	BTFSS      STATUS, 2
0x018C	0x2992      	GOTO       L_fn_Auto_Cooler17
;MyProject.c,75 :: 		pwm_duty_b=45;                                      //делаем старт с максимальной скважностью ШИМ...
0x018D	0x302D      	MOVLW      45
0x018E	0x00A7      	MOVWF      _pwm_duty_b
;MyProject.c,76 :: 		flag_Status_Cooler=1;                               //выставляем флаг,что кулер запущен
0x018F	0x3001      	MOVLW      1
0x0190	0x00B1      	MOVWF      _flag_Status_Cooler
;MyProject.c,77 :: 		}
0x0191	0x2994      	GOTO       L_fn_Auto_Cooler18
L_fn_Auto_Cooler17:
;MyProject.c,79 :: 		pwm_duty_b=set_Pwm;                                  //иначе заполнение ШИМ ставим в соответствии с значением температуры
0x0192	0x0824      	MOVF       _set_Pwm, 0
0x0193	0x00A7      	MOVWF      _pwm_duty_b
;MyProject.c,80 :: 		}
L_fn_Auto_Cooler18:
;MyProject.c,84 :: 		}
0x0194	0x29A8      	GOTO       L_fn_Auto_Cooler19
L_fn_Auto_Cooler0:
;MyProject.c,86 :: 		if(temperature <(Const_Temp1-2)) {                        //если температура опустилась ниже первого уровня...
0x0195	0x3002      	MOVLW      2
0x0196	0x022C      	SUBWF      _Const_Temp1, 0
0x0197	0x00D1      	MOVWF      R1
0x0198	0x01D2      	CLRF       R1+1
0x0199	0x1C03      	BTFSS      STATUS, 0
0x019A	0x03D2      	DECF       R1+1, 1
0x019B	0x3080      	MOVLW      128
0x019C	0x00D0      	MOVWF      R0
0x019D	0x3080      	MOVLW      128
0x019E	0x0652      	XORWF      R1+1, 0
0x019F	0x0250      	SUBWF      R0, 0
0x01A0	0x1D03      	BTFSS      STATUS, 2
0x01A1	0x29A4      	GOTO       L__fn_Auto_Cooler53
0x01A2	0x0851      	MOVF       R1, 0
0x01A3	0x0226      	SUBWF      _temperature, 0
L__fn_Auto_Cooler53:
0x01A4	0x1803      	BTFSC      STATUS, 0
0x01A5	0x29A8      	GOTO       L_fn_Auto_Cooler20
;MyProject.c,87 :: 		pwm_duty_b=0;                                           //выключаем кулер
0x01A6	0x01A7      	CLRF       _pwm_duty_b
;MyProject.c,88 :: 		flag_Status_Cooler=0;                                   // сбрасываем флаг
0x01A7	0x01B1      	CLRF       _flag_Status_Cooler
;MyProject.c,89 :: 		}
L_fn_Auto_Cooler20:
;MyProject.c,90 :: 		}
L_fn_Auto_Cooler19:
;MyProject.c,94 :: 		}
L_end_fn_Auto_Cooler:
0x01A8	0x0008      	RETURN
; end of _fn_Auto_Cooler
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x01A9	0x20D8      	CALL       _____DoICP
0x01AA	0x118A      	BCF        PCLATH, 3
0x01AB	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x01AC	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x01AD	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x01AE	0x0AAD      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x01AF	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x01B0	0x0AAE      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x01B1	0x03D0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x01B2	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x01B3	0x29A9      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x01B4	0x0008      	RETURN
; end of ___CC2DW
_Ow_Write:
;__Lib_OneWire.c,54 :: 		
;__Lib_OneWire.c,57 :: 		
0x01B5	0x1283      	BCF        STATUS, 5
0x01B6	0x0839      	MOVF       FARG_Ow_Write_pin, 0
0x01B7	0x00D1      	MOVWF      R1
0x01B8	0x3001      	MOVLW      1
0x01B9	0x00D0      	MOVWF      R0
0x01BA	0x0851      	MOVF       R1, 0
L__Ow_Write17:
0x01BB	0x1903      	BTFSC      STATUS, 2
0x01BC	0x29C1      	GOTO       L__Ow_Write18
0x01BD	0x0DD0      	RLF        R0, 1
0x01BE	0x1050      	BCF        R0, 0
0x01BF	0x3EFF      	ADDLW      255
0x01C0	0x29BB      	GOTO       L__Ow_Write17
L__Ow_Write18:
0x01C1	0x0850      	MOVF       R0, 0
0x01C2	0x00BD      	MOVWF      Ow_Write_bit_mask_1_L0
;__Lib_OneWire.c,58 :: 		
0x01C3	0x09D0      	COMF       R0, 1
0x01C4	0x0850      	MOVF       R0, 0
0x01C5	0x00BC      	MOVWF      Ow_Write_bit_mask_0_L0
;__Lib_OneWire.c,60 :: 		
0x01C6	0x0838      	MOVF       FARG_Ow_Write_port, 0
0x01C7	0x0084      	MOVWF      FSR
;__Lib_OneWire.c,61 :: 		
0x01C8	0x0850      	MOVF       R0, 0
0x01C9	0x0580      	ANDWF      INDF, 1
;__Lib_OneWire.c,62 :: 		
0x01CA	0x1784      	BSF        FSR, 7
;__Lib_OneWire.c,64 :: 		
0x01CB	0x01BB      	CLRF       Ow_Write_i_L0
L_Ow_Write4:
0x01CC	0x083B      	MOVF       Ow_Write_i_L0, 0
0x01CD	0x3C07      	SUBLW      7
0x01CE	0x1C03      	BTFSS      STATUS, 0
0x01CF	0x29E6      	GOTO       L_Ow_Write5
;__Lib_OneWire.c,65 :: 		
0x01D0	0x083B      	MOVF       Ow_Write_i_L0, 0
0x01D1	0x00D0      	MOVWF      R0
0x01D2	0x083A      	MOVF       FARG_Ow_Write_data_, 0
0x01D3	0x00D1      	MOVWF      R1
0x01D4	0x0850      	MOVF       R0, 0
L__Ow_Write19:
0x01D5	0x1903      	BTFSC      STATUS, 2
0x01D6	0x29DB      	GOTO       L__Ow_Write20
0x01D7	0x0CD1      	RRF        R1, 1
0x01D8	0x13D1      	BCF        R1, 7
0x01D9	0x3EFF      	ADDLW      255
0x01DA	0x29D5      	GOTO       L__Ow_Write19
L__Ow_Write20:
;__Lib_OneWire.c,68 :: 		
0x01DB	0x083C      	MOVF       Ow_Write_bit_mask_0_L0, 0
0x01DC	0x0580      	ANDWF      INDF, 1
;__Lib_OneWire.c,70 :: 		
0x01DD	0x1C51      	BTFSS      R1, 0
0x01DE	0x29E1      	GOTO       L_Ow_Write7
;__Lib_OneWire.c,71 :: 		
0x01DF	0x083D      	MOVF       Ow_Write_bit_mask_1_L0, 0
0x01E0	0x0480      	IORWF      INDF, 1
;__Lib_OneWire.c,72 :: 		
L_Ow_Write7:
;__Lib_OneWire.c,74 :: 		
0x01E1	0x20D0      	CALL       _Delay_80us
;__Lib_OneWire.c,76 :: 		
0x01E2	0x083D      	MOVF       Ow_Write_bit_mask_1_L0, 0
0x01E3	0x0480      	IORWF      INDF, 1
;__Lib_OneWire.c,64 :: 		
0x01E4	0x0ABB      	INCF       Ow_Write_i_L0, 1
;__Lib_OneWire.c,77 :: 		
0x01E5	0x29CC      	GOTO       L_Ow_Write4
L_Ow_Write5:
;__Lib_OneWire.c,78 :: 		
0x01E6	0x1384      	BCF        FSR, 7
;__Lib_OneWire.c,80 :: 		
0x01E7	0x20C9      	CALL       _Delay_50us
;__Lib_OneWire.c,81 :: 		
0x01E8	0x20C9      	CALL       _Delay_50us
;__Lib_OneWire.c,82 :: 		
L_end_Ow_Write:
0x01E9	0x0008      	RETURN
; end of _Ow_Write
_Ow_Read:
;__Lib_OneWire.c,26 :: 		
;__Lib_OneWire.c,29 :: 		
0x01EA	0x1283      	BCF        STATUS, 5
0x01EB	0x0839      	MOVF       FARG_Ow_Read_pin, 0
0x01EC	0x00D1      	MOVWF      R1
0x01ED	0x3001      	MOVLW      1
0x01EE	0x00D0      	MOVWF      R0
0x01EF	0x0851      	MOVF       R1, 0
L__Ow_Read12:
0x01F0	0x1903      	BTFSC      STATUS, 2
0x01F1	0x29F6      	GOTO       L__Ow_Read13
0x01F2	0x0DD0      	RLF        R0, 1
0x01F3	0x1050      	BCF        R0, 0
0x01F4	0x3EFF      	ADDLW      255
0x01F5	0x29F0      	GOTO       L__Ow_Read12
L__Ow_Read13:
0x01F6	0x0850      	MOVF       R0, 0
0x01F7	0x00BD      	MOVWF      Ow_Read_bit_mask_1_L0
;__Lib_OneWire.c,30 :: 		
0x01F8	0x0950      	COMF       R0, 0
0x01F9	0x00BC      	MOVWF      Ow_Read_bit_mask_0_L0
;__Lib_OneWire.c,32 :: 		
0x01FA	0x0838      	MOVF       FARG_Ow_Read_port, 0
0x01FB	0x0084      	MOVWF      FSR
;__Lib_OneWire.c,33 :: 		
0x01FC	0x01BB      	CLRF       Ow_Read_tmp_L0
;__Lib_OneWire.c,34 :: 		
0x01FD	0x01BA      	CLRF       Ow_Read_i_L0
L_Ow_Read0:
0x01FE	0x083A      	MOVF       Ow_Read_i_L0, 0
0x01FF	0x3C07      	SUBLW      7
0x0200	0x1C03      	BTFSS      STATUS, 0
0x0201	0x2A22      	GOTO       L_Ow_Read1
;__Lib_OneWire.c,35 :: 		
0x0202	0x083C      	MOVF       Ow_Read_bit_mask_0_L0, 0
0x0203	0x0580      	ANDWF      INDF, 1
;__Lib_OneWire.c,37 :: 		
0x0204	0x1784      	BSF        FSR, 7
;__Lib_OneWire.c,38 :: 		
0x0205	0x083C      	MOVF       Ow_Read_bit_mask_0_L0, 0
0x0206	0x0580      	ANDWF      INDF, 1
;__Lib_OneWire.c,39 :: 		
0x0207	0x20C7      	CALL       _Delay_1us
;__Lib_OneWire.c,40 :: 		
0x0208	0x083D      	MOVF       Ow_Read_bit_mask_1_L0, 0
0x0209	0x0480      	IORWF      INDF, 1
;__Lib_OneWire.c,41 :: 		
0x020A	0x20C7      	CALL       _Delay_1us
;__Lib_OneWire.c,43 :: 		
0x020B	0x1384      	BCF        FSR, 7
;__Lib_OneWire.c,44 :: 		
0x020C	0x083D      	MOVF       Ow_Read_bit_mask_1_L0, 0
0x020D	0x0500      	ANDWF      INDF, 0
0x020E	0x00D0      	MOVWF      R0
0x020F	0x1903      	BTFSC      STATUS, 2
0x0210	0x2A1E      	GOTO       L_Ow_Read3
;__Lib_OneWire.c,45 :: 		
0x0211	0x083A      	MOVF       Ow_Read_i_L0, 0
0x0212	0x00D1      	MOVWF      R1
0x0213	0x3001      	MOVLW      1
0x0214	0x00D0      	MOVWF      R0
0x0215	0x0851      	MOVF       R1, 0
L__Ow_Read14:
0x0216	0x1903      	BTFSC      STATUS, 2
0x0217	0x2A1C      	GOTO       L__Ow_Read15
0x0218	0x0DD0      	RLF        R0, 1
0x0219	0x1050      	BCF        R0, 0
0x021A	0x3EFF      	ADDLW      255
0x021B	0x2A16      	GOTO       L__Ow_Read14
L__Ow_Read15:
0x021C	0x0850      	MOVF       R0, 0
0x021D	0x04BB      	IORWF      Ow_Read_tmp_L0, 1
L_Ow_Read3:
;__Lib_OneWire.c,47 :: 		
0x021E	0x20C9      	CALL       _Delay_50us
;__Lib_OneWire.c,48 :: 		
0x021F	0x20C9      	CALL       _Delay_50us
;__Lib_OneWire.c,34 :: 		
0x0220	0x0ABA      	INCF       Ow_Read_i_L0, 1
;__Lib_OneWire.c,49 :: 		
0x0221	0x29FE      	GOTO       L_Ow_Read0
L_Ow_Read1:
;__Lib_OneWire.c,50 :: 		
0x0222	0x083B      	MOVF       Ow_Read_tmp_L0, 0
0x0223	0x00D0      	MOVWF      R0
;__Lib_OneWire.c,51 :: 		
L_end_Ow_Read:
0x0224	0x0008      	RETURN
; end of _Ow_Read
_pwm1:
;MyProject.c,98 :: 		unsigned short pwm1 (unsigned short n ){       //функция программный ШИМ
;MyProject.c,104 :: 		switch(n) {                                     //переключатель определяет крайние положения ШИМ1
0x0225	0x2A35      	GOTO       L_pwm121
;MyProject.c,105 :: 		case 0:
L_pwm123:
;MyProject.c,106 :: 		k = 0;
0x0226	0x1283      	BCF        STATUS, 5
0x0227	0x01D1      	CLRF       R1
;MyProject.c,107 :: 		break;
0x0228	0x2A3E      	GOTO       L_pwm122
;MyProject.c,108 :: 		case 50 :
L_pwm124:
;MyProject.c,109 :: 		k = 1;
0x0229	0x3001      	MOVLW      1
0x022A	0x00D1      	MOVWF      R1
;MyProject.c,110 :: 		break;
0x022B	0x2A3E      	GOTO       L_pwm122
;MyProject.c,111 :: 		default:
L_pwm125:
;MyProject.c,114 :: 		if (pwmcycle <= n)                    // и устанавливает длинну импульса ШИМ1
0x022C	0x0852      	MOVF       R2, 0
0x022D	0x0236      	SUBWF      FARG_pwm1_n, 0
0x022E	0x1C03      	BTFSS      STATUS, 0
0x022F	0x2A33      	GOTO       L_pwm126
;MyProject.c,115 :: 		k = 1;
0x0230	0x3001      	MOVLW      1
0x0231	0x00D1      	MOVWF      R1
0x0232	0x2A34      	GOTO       L_pwm127
L_pwm126:
;MyProject.c,117 :: 		k = 0;
0x0233	0x01D1      	CLRF       R1
L_pwm127:
;MyProject.c,118 :: 		}
0x0234	0x2A3E      	GOTO       L_pwm122
L_pwm121:
0x0235	0x0836      	MOVF       FARG_pwm1_n, 0
0x0236	0x3A00      	XORLW      0
0x0237	0x1903      	BTFSC      STATUS, 2
0x0238	0x2A26      	GOTO       L_pwm123
0x0239	0x0836      	MOVF       FARG_pwm1_n, 0
0x023A	0x3A32      	XORLW      50
0x023B	0x1903      	BTFSC      STATUS, 2
0x023C	0x2A29      	GOTO       L_pwm124
0x023D	0x2A2C      	GOTO       L_pwm125
L_pwm122:
;MyProject.c,120 :: 		if (++pwmcycle == 50 ) {              //  если отсчитали 50 циклов
0x023E	0x0A52      	INCF       R2, 0
0x023F	0x00D0      	MOVWF      R0
0x0240	0x0850      	MOVF       R0, 0
0x0241	0x00D2      	MOVWF      R2
0x0242	0x0852      	MOVF       R2, 0
0x0243	0x3A32      	XORLW      50
0x0244	0x1D03      	BTFSS      STATUS, 2
0x0245	0x2A47      	GOTO       L_pwm128
;MyProject.c,121 :: 		pwmcycle = 0;                       //     обнуляем счетчик циклов
0x0246	0x01D2      	CLRF       R2
;MyProject.c,122 :: 		}
L_pwm128:
;MyProject.c,124 :: 		return k ;
0x0247	0x0851      	MOVF       R1, 0
0x0248	0x00D0      	MOVWF      R0
;MyProject.c,125 :: 		}
L_end_pwm1:
0x0249	0x0008      	RETURN
; end of _pwm1
_main:
0x024A	0x1283      	BCF        STATUS, 5
0x024B	0x01A4      	CLRF       _set_Pwm
0x024C	0x01A5      	CLRF       _a
0x024D	0x01A6      	CLRF       _temperature
0x024E	0x01A7      	CLRF       _pwm_duty_b
;MyProject.c,191 :: 		void main() {
;MyProject.c,193 :: 		TRISIO = 0b101011;                          // направление работы ножек порта А
0x024F	0x302B      	MOVLW      43
0x0250	0x1683      	BSF        STATUS, 5
0x0251	0x0085      	MOVWF      TRISIO
;MyProject.c,194 :: 		CMCON = 0x07;                               // отключение компараторов
0x0252	0x3007      	MOVLW      7
0x0253	0x1283      	BCF        STATUS, 5
0x0254	0x0099      	MOVWF      CMCON
;MyProject.c,195 :: 		GPIO = 0b000000;                            // очищаем порт
0x0255	0x0185      	CLRF       GPIO
;MyProject.c,196 :: 		OPTION_REG=0b10000000;                      // настройки TMR0
0x0256	0x3080      	MOVLW      128
0x0257	0x1683      	BSF        STATUS, 5
0x0258	0x0081      	MOVWF      OPTION_REG
;MyProject.c,197 :: 		WPU =0b00000000;                            // подтягивающие R
0x0259	0x0195      	CLRF       WPU
;MyProject.c,198 :: 		CMCON=0b000000111;                          //отключаем компаратор
0x025A	0x3007      	MOVLW      7
0x025B	0x1283      	BCF        STATUS, 5
0x025C	0x0099      	MOVWF      CMCON
;MyProject.c,199 :: 		ADCON0=0b00000000;                          //настройка АЦП
0x025D	0x019F      	CLRF       ADCON0
;MyProject.c,200 :: 		ANSEL=0b00000000;                           //определяем входы как цифровые
0x025E	0x1683      	BSF        STATUS, 5
0x025F	0x019F      	CLRF       ANSEL
;MyProject.c,201 :: 		INTCON=0b11000000;                          //настройки прерываний
0x0260	0x30C0      	MOVLW      192
0x0261	0x008B      	MOVWF      INTCON
;MyProject.c,202 :: 		PIE1=00000001;                              //  настройки прерываний
0x0262	0x3001      	MOVLW      1
0x0263	0x008C      	MOVWF      PIE1
;MyProject.c,203 :: 		IOCB=00000000;                              //
0x0264	0x0196      	CLRF       IOCB
;MyProject.c,204 :: 		T1CON =0b00010001;                          //настройки таймера TMR1 FOSC/4
0x0265	0x3011      	MOVLW      17
0x0266	0x1283      	BCF        STATUS, 5
0x0267	0x0090      	MOVWF      T1CON
;MyProject.c,206 :: 		fn_Init_Const();                         //чтение констант из EEPROM
0x0268	0x20E7      	CALL       _fn_Init_Const
;MyProject.c,207 :: 		OUT_COOLER=1;                            //импульс при включении устройства
0x0269	0x1283      	BCF        STATUS, 5
0x026A	0x1505      	BSF        GPIO, 2
;MyProject.c,208 :: 		delay_ms(500);
0x026B	0x3003      	MOVLW      3
0x026C	0x00DB      	MOVWF      R11
0x026D	0x308A      	MOVLW      138
0x026E	0x00DC      	MOVWF      R12
0x026F	0x3055      	MOVLW      85
0x0270	0x00DD      	MOVWF      R13
L_main43:
0x0271	0x0BDD      	DECFSZ     R13, 1
0x0272	0x2A71      	GOTO       L_main43
0x0273	0x0BDC      	DECFSZ     R12, 1
0x0274	0x2A71      	GOTO       L_main43
0x0275	0x0BDB      	DECFSZ     R11, 1
0x0276	0x2A71      	GOTO       L_main43
0x0277	0x0000      	NOP
0x0278	0x0000      	NOP
;MyProject.c,210 :: 		while(1){
L_main44:
;MyProject.c,211 :: 		if(t==1) pwm_duty_b=49;              //если датчик не подключен(неисправен,обрыв) ставим максимальное заполнение ШИМ
0x0279	0x0833      	MOVF       _t, 0
0x027A	0x3A01      	XORLW      1
0x027B	0x1D03      	BTFSS      STATUS, 2
0x027C	0x2A7F      	GOTO       L_main46
0x027D	0x3031      	MOVLW      49
0x027E	0x00A7      	MOVWF      _pwm_duty_b
L_main46:
;MyProject.c,212 :: 		OUT_COOLER=pwm1(pwm_duty_b);         //функция программный ШИМ
0x027F	0x0827      	MOVF       _pwm_duty_b, 0
0x0280	0x00B6      	MOVWF      FARG_pwm1_n
0x0281	0x2225      	CALL       _pwm1
0x0282	0x1283      	BCF        STATUS, 5
0x0283	0x1850      	BTFSC      R0, 0
0x0284	0x2A87      	GOTO       L__main58
0x0285	0x1105      	BCF        GPIO, 2
0x0286	0x2A88      	GOTO       L__main59
L__main58:
0x0287	0x1505      	BSF        GPIO, 2
L__main59:
;MyProject.c,214 :: 		}                                      //end while
0x0288	0x2A79      	GOTO       L_main44
;MyProject.c,216 :: 		}                                         //end main
L_end_main:
0x0289	0x2A89      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [187]    _interrupt
0x00BF       [8]    _Delay_500us
0x00C7       [2]    _Delay_1us
0x00C9       [7]    _Delay_50us
0x00D0       [8]    _Delay_80us
0x00D8       [6]    _____DoICP
0x00DE       [9]    _EEPROM_Read
0x00E7      [36]    _fn_Init_Const
0x010B      [40]    _Ow_Reset
0x0133     [118]    _fn_Auto_Cooler
0x01A9      [12]    ___CC2DW
0x01B5      [53]    _Ow_Write
0x01EA      [59]    _Ow_Read
0x0225      [37]    _pwm1
0x024A      [64]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    GPIO
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x0010       [1]    T1CON
0x0019       [1]    CMCON
0x001F       [1]    ADCON0
0x0024       [1]    _set_Pwm
0x0025       [1]    _a
0x0026       [1]    _temperature
0x0027       [1]    _pwm_duty_b
0x0028       [1]    _Const_Pwm2
0x0029       [1]    _Const_Pwm1
0x002A       [1]    _Const_Pwm3
0x002B       [1]    _Const_Temp4
0x002C       [1]    _Const_Temp1
0x002D       [2]    ___DoICPAddr
0x002F       [1]    _Const_Temp3
0x0030       [1]    _Const_Temp2
0x0031       [1]    _flag_Status_Cooler
0x0032       [1]    _n
0x0033       [1]    _t
0x0034       [1]    ___savePCLATH
0x0035       [1]    ___saveSTATUS
0x0036       [1]    FARG_pwm1_n
0x0037       [1]    FARG_EEPROM_Read_Address
0x0038       [1]    FARG_Ow_Write_port
0x0038       [1]    FARG_Ow_Reset_port
0x0038       [1]    FARG_Ow_Read_port
0x0039       [1]    FARG_Ow_Write_pin
0x0039       [1]    FARG_Ow_Reset_pin
0x0039       [1]    FARG_Ow_Read_pin
0x003A       [1]    Ow_Read_i_L0
0x003A       [1]    Ow_Reset_res_L0
0x003A       [1]    FARG_Ow_Write_data_
0x003B       [1]    Ow_Reset_bit_mask_1_L0
0x003B       [1]    Ow_Write_i_L0
0x003B       [1]    Ow_Read_tmp_L0
0x003C       [1]    Ow_Write_bit_mask_0_L0
0x003C       [1]    Ow_Read_bit_mask_0_L0
0x003D       [1]    Ow_Write_bit_mask_1_L0
0x003D       [1]    Ow_Read_bit_mask_1_L0
0x0050       [1]    R0
0x0051       [1]    R1
0x0052       [1]    R2
0x0053       [1]    R3
0x0054       [1]    R4
0x0055       [1]    R5
0x0056       [1]    R6
0x0057       [1]    R7
0x0058       [1]    R8
0x0059       [1]    R9
0x005A       [1]    R10
0x005B       [1]    R11
0x005C       [1]    R12
0x005D       [1]    R13
0x005E       [1]    R14
0x005F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISIO
0x008C       [1]    PIE1
0x0095       [1]    WPU
0x0096       [1]    IOCB
0x009A       [1]    EEDATA
0x009B       [1]    EEADR
0x009C       [1]    EECON1
0x009F       [1]    ANSEL
//** Label List: ** 
//----------------------------------------------
  L_fn_Auto_Cooler0
  L_fn_Auto_Cooler1
  L_fn_Auto_Cooler2
  L_fn_Auto_Cooler3
  L_fn_Auto_Cooler4
  L_fn_Auto_Cooler5
  L_fn_Auto_Cooler6
  L_fn_Auto_Cooler7
  L_fn_Auto_Cooler8
  L_fn_Auto_Cooler9
  L_fn_Auto_Cooler10
  L_fn_Auto_Cooler11
  L_fn_Auto_Cooler12
  L_fn_Auto_Cooler13
  L_fn_Auto_Cooler14
  L_fn_Auto_Cooler15
  L_fn_Auto_Cooler16
  L_fn_Auto_Cooler17
  L_fn_Auto_Cooler18
  L_fn_Auto_Cooler19
  L_fn_Auto_Cooler20
  L_pwm121
  L_pwm122
  L_pwm123
  L_pwm124
  L_pwm125
  L_pwm126
  L_pwm127
  L_pwm128
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_interrupt32
  L_interrupt33
  L_interrupt34
  L_interrupt35
  L_interrupt36
  L_interrupt37
  L_interrupt38
  L_interrupt39
  L_interrupt40
  L_interrupt41
  L_interrupt42
  L_main43
  L_main44
  L_main45
  L_main46
  L__fn_Auto_Cooler47
  L__fn_Auto_Cooler48
  L_end_fn_Init_Const
  _fn_Init_Const
  L_end_fn_Auto_Cooler
  _fn_Auto_Cooler
  L__fn_Auto_Cooler51
  L__fn_Auto_Cooler52
  L__fn_Auto_Cooler53
  L_end_pwm1
  _pwm1
  L_end_interrupt
  _interrupt
  L__interrupt56
  L_end_main
  _main
  L__main58
  L__main59
  L_EEPROM_Write0
  L_EEPROM_Write1
  L_end_EEPROM_Read
  _EEPROM_Read
  L_end_EEPROM_Write
  _EEPROM_Write
  L__EEPROM_Write4
  L__EEPROM_Write5
  L_loopCA2AWs
  L_CA2AWend
  _CCA2AW_Loop1
  L_loopCS2Ss
  L_CS2Send
  _CCS2S_Loop1
  L_CCS2Send
  L_loopFZinSWs
  L_FZinSend
  _CC2D_Loop1
  L_end_____DoICP
  _____DoICP
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_fn_Auto_Cooler0
  L_fn_Auto_Cooler1
  L_fn_Auto_Cooler2
  L_fn_Auto_Cooler3
  L_fn_Auto_Cooler4
  L_fn_Auto_Cooler5
  L_fn_Auto_Cooler6
  L_fn_Auto_Cooler7
  L_fn_Auto_Cooler8
  L_fn_Auto_Cooler9
  L_fn_Auto_Cooler10
  L_fn_Auto_Cooler11
  L_fn_Auto_Cooler12
  L_fn_Auto_Cooler13
  L_fn_Auto_Cooler14
  L_fn_Auto_Cooler15
  L_fn_Auto_Cooler16
  L_fn_Auto_Cooler17
  L_fn_Auto_Cooler18
  L_fn_Auto_Cooler19
  L_fn_Auto_Cooler20
  L_pwm121
  L_pwm122
  L_pwm123
  L_pwm124
  L_pwm125
  L_pwm126
  L_pwm127
  L_pwm128
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_interrupt32
  L_interrupt33
  L_interrupt34
  L_interrupt35
  L_interrupt36
  L_interrupt37
  L_interrupt38
  L_interrupt39
  L_interrupt40
  L_interrupt41
  L_interrupt42
  L_main43
  L_main44
  L_main45
  L_main46
  L__fn_Auto_Cooler47
  L__fn_Auto_Cooler48
  L_end_fn_Init_Const
  _fn_Init_Const
  L_end_fn_Auto_Cooler
  _fn_Auto_Cooler
  L__fn_Auto_Cooler51
  L__fn_Auto_Cooler52
  L__fn_Auto_Cooler53
  L_end_pwm1
  _pwm1
  L_end_interrupt
  _interrupt
  L__interrupt56
  L_end_main
  _main
  L__main58
  L__main59
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_1ms6
  L_Delay_5ms7
  L_Delay_8ms8
  L_Delay_10ms9
  L_Delay_100ms10
  L_Delay_1sec11
  L_boot16_Delay_5ms12
  L_Delay_Cyc13
  L_Delay_Cyc14
  L_VDelay_ms15
  L_VDelay_ms16
  L_VDelay_ms17
  L_VDelay_Advanced_ms18
  L_VDelay_Advanced_ms19
  L_VDelay_Advanced_ms20
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end_boot16_Delay_5ms
  _boot16_Delay_5ms
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms38
  L__VDelay_ms39
  L__VDelay_ms40
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms42
  L__VDelay_Advanced_ms43
  L__VDelay_Advanced_ms44
  L_Ow_Read0
  L_Ow_Read1
  L_Ow_Read2
  L_Ow_Read3
  L_Ow_Write4
  L_Ow_Write5
  L_Ow_Write6
  L_Ow_Write7
  L_end_Ow_Reset
  _Ow_Reset
  L__Ow_Reset9
  L__Ow_Reset10
  L_end_Ow_Read
  _Ow_Read
  L__Ow_Read12
  L__Ow_Read13
  L__Ow_Read14
  L__Ow_Read15
  L_end_Ow_Write
  _Ow_Write
  L__Ow_Write17
  L__Ow_Write18
  L__Ow_Write19
  L__Ow_Write20
